# 其它基因 SV断点与TSS的距离和表达的关系探索分析   (What)

* Aug 21, 2025                                     (When)
* biotrainee ~/1000_noncoding/3.SV_analysis/2.analysis          (Where)
* 首先可以看下大概离转录起始位点多远的断点会对基因的表达产生比较大的影响,其次
就是看下那些SV引起基因表达升高的样本中基因的表达和拷贝数的相关性如何，
按照Peifer那篇文章，一些基因附近的SV导致基因的高表达并且在这些样本中这些基因的表达和拷贝数
的相关性很小，其实就是提示增强子劫持(Why)


## 代码如下                                          (How)

```
##loading packages
library(dplyr)
library(GenomicRanges)
library(ggplot2)
library(ggpubr)
library(survminer)
library(survival)

##loading files
load("~/1000_noncoding/3.SV_analysis/2.analysis/ensembl_canonical_transcripts_bed4.Rdata")
load("~/1000_noncoding/3.SV_analysis/2.analysis/3-3_absolute_cn_long.Rdata")
load("~/1000_noncoding/3.SV_analysis/2.analysis/bedpe_986.Rdata")
load("~/1000_noncoding/3.SV_analysis/2.analysis/6-1.lc_1019_expr_long.Rdata")
clin <- read.delim("~/1000_noncoding/3.SV_analysis/1.resources/clin_info_1000_with_pathway_with_gene.txt")

##整理数据框1 Peifer table1(包含上下游500kb的所有突变)
#distance_SV2TSS relative_location(upstr,dnstr,inside,complex?) TERT_exprscore

##首先需要处理一下bedpe文件
#对于DUP、DEL、INV，需要交换A和B的位置多生成一行，最后再去掉重复，否则overlap的时候B不能被overlap
#BND本来就是这样的，可以不用管
new_bedpe_986 <- bedpe_986 %>%
  filter(TYPE %in% c("DUP", "DEL", "INV")) %>%
  mutate(
    CHROM_A = CHROM_B,
    START_A = START_B,
    END_A = END_B,
    CHROM_B = CHROM_A,
    START_B = START_A,
    END_B = END_A
  ) %>%
  bind_rows(bedpe_986) # 合并旧行和新生成的行
##################绘制expr distance图#################################
genes <-  c("CDK4","HMGA2","MDM2","FRS2","FOXA1","AURKB","ERBB2",
            "TOP2A","CCNE1","AURKA","PRKCI","KDR","KRAS","CCND1",
            "TRIP13","TERT","E2F3","H2AC17","HMGA1","EGFR")

#此函数可以绘制expr vs distance图
SV.expr.distance.plot <- function(gene){
  #得到转录本的长度和正负链的信息
  gene_transcript_length <- ensembl_canonical_transcripts_bed4$end[ensembl_canonical_transcripts_bed4$gene_name==gene]-ensembl_canonical_transcripts_bed4$start[ensembl_canonical_transcripts_bed4$gene_name==gene]
  gene_strand <- ensembl_canonical_transcripts_bed4$strand[ensembl_canonical_transcripts_bed4$gene_name==gene]

  #把断点和区间做overlap
  gene_bed <- ensembl_canonical_transcripts_bed4[ensembl_canonical_transcripts_bed4$gene_name==gene,]
  gene_plus_flanking_bed <- ensembl_canonical_transcripts_bed4 %>%
    filter(gene_name==gene) %>%
    mutate(start=start-500000,end=end+500000)
  gr_gene_plus_flanking <- GRanges(seqnames = gene_plus_flanking_bed$chr,
                                   ranges = IRanges(start = gene_plus_flanking_bed$start+1,
                                                    end=gene_plus_flanking_bed$end))
  gr_bedpes <- GRanges(
    seqnames = new_bedpe_986$CHROM_A,
    ranges = IRanges(start = new_bedpe_986$START_A+1,end = new_bedpe_986$END_A)
  )
  hits_geneplusflanking_bedpes <- findOverlaps(gr_gene_plus_flanking,gr_bedpes)
  overlap_data <- data.frame(
    gene_index = queryHits(hits_geneplusflanking_bedpes),
    bedpe_index = subjectHits(hits_geneplusflanking_bedpes)
  )
  result <- cbind(gene_plus_flanking_bed[overlap_data$gene_index, ],new_bedpe_986[overlap_data$bedpe_index, ])

  ##判断一下基因的正负链
  if(gene_strand=="-"){
    df <- result %>%
      select(gene_name,CHROM_A,START_A,END_A,SAMPLE,INFO,ID) %>%
      mutate(distance_SV2TSS=gene_bed$end-START_A) %>%
      mutate(relative_location=ifelse(distance_SV2TSS<0,"upstream",
                                      ifelse(gene_transcript_length>abs(distance_SV2TSS) & distance_SV2TSS>0,
                                             "gene_body","downstream"))) %>%
      mutate(Sample=SAMPLE,symbol=gene_name) %>%
      left_join(lc_1019_expr_long,by=c("Sample","symbol")) %>%
      select(-Sample,-symbol) %>%
      #每个样本仅保留到TSS距离最小者
      group_by(SAMPLE) %>%
      filter(abs(distance_SV2TSS) == min(abs(distance_SV2TSS))) %>%
      ungroup() %>%
      mutate(Gene=gene_name,Sample=SAMPLE) %>%
      left_join(absolute_cn_long,by=c("Gene","Sample")) %>%
      select(-Sample,-Gene,-Cytoband)
  }else{
    df <- result %>%
      select(gene_name,CHROM_A,START_A,END_A,SAMPLE,INFO,ID) %>%
      mutate(distance_SV2TSS=gene_bed$start-START_A) %>%
      mutate(relative_location=ifelse(distance_SV2TSS>0,"upstream",
                                      ifelse(gene_transcript_length>abs(distance_SV2TSS) & distance_SV2TSS<0,
                                             "gene_body","downstream"))) %>%
      mutate(Sample=SAMPLE,symbol=gene_name) %>%
      left_join(lc_1019_expr_long,by=c("Sample","symbol")) %>%
      select(-Sample,-symbol) %>%
      #每个样本仅保留到TSS距离最小者
      group_by(SAMPLE) %>%
      filter(abs(distance_SV2TSS) == min(abs(distance_SV2TSS))) %>%
      ungroup() %>%
      mutate(Gene=gene_name,Sample=SAMPLE) %>%
      left_join(absolute_cn_long,by=c("Gene","Sample")) %>%
      select(-Sample,-Gene,-Cytoband)

  }
  ##########绘图

  ##绘制第一张图-到TSS距离和表达的关系 outlier实际上距离不会超过100kb的
  df_plot <- df %>%
    select(SAMPLE,distance_SV2TSS,deseq2_normalized_counts,relative_location) %>%
    mutate(distance=distance_SV2TSS/1000,exprscore=log2(deseq2_normalized_counts))
  Q3 <- quantile(lc_1019_expr_long$deseq2_normalized_counts[lc_1019_expr_long$symbol==gene], 0.75)  # 计算四分位数
  IQR_value <- IQR(lc_1019_expr_long$deseq2_normalized_counts[lc_1019_expr_long$symbol==gene])      # 计算四分位距
  upper_bound <- Q3 + 1.5 * IQR_value  # 计算离群值的上界
  folder_path <- "~/1000_noncoding/3.SV_analysis/pictures/Peifer_expr_distance_plots/"
  filename <- file.path(folder_path,paste0(gene," expr_svdistance.pdf"))
  ggplot(df_plot, aes(x = distance, y = exprscore,colour = relative_location)) +
    geom_point() +
    scale_x_continuous(name = "Distance(TSS-POS_of_Breakpoint)",labels = function(x) paste(x, "kb")) +  # 设置横轴标题
    scale_y_continuous(name = paste0(gene," Expression Score")) +  # 设置纵轴标题
    scale_color_manual(values = c("downstream" = "#4D779B", "gene_body" = "#FFC04D","upstream"="#CD3842"))+
    theme_bw()  + # 使用简洁的主题
    geom_hline(yintercept = log2(upper_bound), linetype = "dashed", color = "red") +  # 添加y轴辅助线
    annotate("text", x = -150, y = log2(upper_bound), label = "outlier threshold", color = "grey", size = 5, hjust = 0.25,vjust=1) +# 添加辅助线标签
    theme(legend.position = c(0.85, 0.85))+
    theme(
      plot.title = element_text(size = 16, face = "bold"),  # 标题加粗并增大字体
      axis.title.x = element_text(size = 14, face = "bold"),  # 横坐标加粗并增大字体
      axis.title.y = element_text(size = 14, face = "bold"),   # 纵坐标加粗并增大字体
      axis.text.x = element_text(size = 12, face = "bold"),  # 横坐标字体加大加粗
      axis.text.y = element_text(size = 12, face = "bold"),  # 纵坐标字体加大加粗
    )
  ggsave(filename,device = "pdf",width =10 ,height =5 )
}
for(gene in genes){SVdistance.expr.plot(gene)}
#从图片上看起来除了TERT以外的candidates包括cdk4,frs2,mdm2,ccne1,egfr这5个


#此函数可以绘制expr vs cn图
SVexpr.cn.plot <- function(gene,SV_distance){
  #得到转录本的长度和正负链的信息
  gene_transcript_length <- ensembl_canonical_transcripts_bed4$end[ensembl_canonical_transcripts_bed4$gene_name==gene]-ensembl_canonical_transcripts_bed4$start[ensembl_canonical_transcripts_bed4$gene_name==gene]
  gene_strand <- ensembl_canonical_transcripts_bed4$strand[ensembl_canonical_transcripts_bed4$gene_name==gene]

  #把断点和区间做overlap
  gene_bed <- ensembl_canonical_transcripts_bed4[ensembl_canonical_transcripts_bed4$gene_name==gene,]
  gene_plus_flanking_bed <- ensembl_canonical_transcripts_bed4 %>%
    filter(gene_name==gene) %>%
    mutate(start=start-500000,end=end+500000)
  gr_gene_plus_flanking <- GRanges(seqnames = gene_plus_flanking_bed$chr,
                                   ranges = IRanges(start = gene_plus_flanking_bed$start+1,
                                                    end=gene_plus_flanking_bed$end))
  gr_bedpes <- GRanges(
    seqnames = new_bedpe_986$CHROM_A,
    ranges = IRanges(start = new_bedpe_986$START_A+1,end = new_bedpe_986$END_A)
  )
  hits_geneplusflanking_bedpes <- findOverlaps(gr_gene_plus_flanking,gr_bedpes)
  overlap_data <- data.frame(
    gene_index = queryHits(hits_geneplusflanking_bedpes),
    bedpe_index = subjectHits(hits_geneplusflanking_bedpes)
  )
  result <- cbind(gene_plus_flanking_bed[overlap_data$gene_index, ],new_bedpe_986[overlap_data$bedpe_index, ])

  ##判断一下基因的正负链
  if(gene_strand=="-"){
    df <- result %>%
      select(gene_name,CHROM_A,START_A,END_A,SAMPLE,INFO,ID) %>%
      mutate(distance_SV2TSS=gene_bed$end-START_A) %>%
      mutate(relative_location=ifelse(distance_SV2TSS<0,"upstream",
                                      ifelse(gene_transcript_length>abs(distance_SV2TSS) & distance_SV2TSS>0,
                                             "gene_body","downstream"))) %>%
      mutate(Sample=SAMPLE,symbol=gene_name) %>%
      left_join(lc_1019_expr_long,by=c("Sample","symbol")) %>%
      select(-Sample,-symbol) %>%
      #每个样本仅保留到TSS距离最小者
      group_by(SAMPLE) %>%
      filter(abs(distance_SV2TSS) == min(abs(distance_SV2TSS))) %>%
      ungroup() %>%
      mutate(Gene=gene_name,Sample=SAMPLE) %>%
      left_join(absolute_cn_long,by=c("Gene","Sample")) %>%
      select(-Sample,-Gene,-Cytoband)
  }else{
    df <- result %>%
      select(gene_name,CHROM_A,START_A,END_A,SAMPLE,INFO,ID) %>%
      mutate(distance_SV2TSS=gene_bed$start-START_A) %>%
      mutate(relative_location=ifelse(distance_SV2TSS>0,"upstream",
                                      ifelse(gene_transcript_length>abs(distance_SV2TSS) & distance_SV2TSS<0,
                                             "gene_body","downstream"))) %>%
      mutate(Sample=SAMPLE,symbol=gene_name) %>%
      left_join(lc_1019_expr_long,by=c("Sample","symbol")) %>%
      select(-Sample,-symbol) %>%
      #每个样本仅保留到TSS距离最小者
      group_by(SAMPLE) %>%
      filter(abs(distance_SV2TSS) == min(abs(distance_SV2TSS))) %>%
      ungroup() %>%
      mutate(Gene=gene_name,Sample=SAMPLE) %>%
      left_join(absolute_cn_long,by=c("Gene","Sample")) %>%
      select(-Sample,-Gene,-Cytoband)

  }
  ##########绘图
  ##所有样本该gene表达与拷贝数的关系，对于正负100kb内的断点，表达与拷贝数的关系
  df_plot <- lc_1019_expr_long %>%
    filter(symbol==gene) %>%
    mutate(Gene=symbol) %>%
    left_join(absolute_cn_long,by=c("Sample","Gene"))
  df_plot <- na.omit(df_plot)

  cor_test <- cor.test(log2(df_plot$deseq2_normalized_counts), df_plot$Absolute_CN)
  correlation <- cor_test$estimate  # 相关系数
  p_value <- cor_test$p.value      # p值

  folder_path <- "~/1000_noncoding/3.SV_analysis/pictures/Peifer_cn_expr_correlation/"
  filename <- file.path(folder_path,paste0(gene,"Correlation between CN and ",gene," expression score.pdf"))

  ggplot(df_plot, aes(x = Absolute_CN, y = log2(deseq2_normalized_counts))) +
    geom_point(color = "#4D779B") +  # 绘制散点
    geom_smooth(method = "lm", se = FALSE, color = "red") +  # 拟合直线
    annotate("text", x = 20, y = 10,
             label = paste("Correlation: ", round(correlation, 2),
                           "\np-value: ", format(p_value, digits = 3)),
             color = "black", size = 5) +  # 显示相关系数p
    labs(title = paste0("Correlation between CN and ",gene," expression score"), x = "Copy Number", y = "Log2(deseq2_normalized_counts)") +
    theme_bw()+
    theme(
      plot.title = element_text(size = 16, face = "bold"),  # 标题加粗并增大字体
      axis.title.x = element_text(size = 14, face = "bold"),  # 横坐标加粗并增大字体
      axis.title.y = element_text(size = 14, face = "bold"),   # 纵坐标加粗并增大字体
      axis.text.x = element_text(size = 12, face = "bold"),  # 横坐标字体加大加粗
      axis.text.y = element_text(size = 12, face = "bold"),  # 纵坐标字体加大加粗
    )
  ggsave(filename,device = "pdf",width =8 ,height =6 )

  ##100kb以内的SV
  df_plot <- df %>%
    filter(abs(distance_SV2TSS)<SV_distance) %>%
    select(Absolute_CN,deseq2_normalized_counts)
  cor_test <- cor.test(log2(df_plot$deseq2_normalized_counts), df_plot$Absolute_CN)
  correlation <- cor_test$estimate  # 相关系数
  p_value <- cor_test$p.value      # p值

  folder_path <- "~/1000_noncoding/3.SV_analysis/pictures/Peifer_cn_expr_correlation/"
  filename <- file.path(folder_path,paste0(gene,"Correlation between CN and ",gene," expression score(<",SV_distance,").pdf"))

  ggplot(df_plot, aes(x = Absolute_CN, y = log2(deseq2_normalized_counts))) +
    geom_point(color = "#4D779B") +  # 绘制散点
    geom_smooth(method = "lm", se = FALSE, color = "red") +  # 拟合直线
    annotate("text", x = 20, y = 10,
             label = paste("Correlation: ", round(correlation, 2),
                           "\np-value: ", format(p_value, digits = 3)),
             color = "black", size = 5) +  # 显示相关系数p
    labs(title = paste0("Correlation between CN and ",gene," expression score(in candidate SV samples)"), x = "Copy Number", y = "Log2(deseq2_normalized_counts)") +
    theme_bw()+
    theme(
      plot.title = element_text(size = 16, face = "bold"),  # 标题加粗并增大字体
      axis.title.x = element_text(size = 14, face = "bold"),  # 横坐标加粗并增大字体
      axis.title.y = element_text(size = 14, face = "bold"),   # 纵坐标加粗并增大字体
      axis.text.x = element_text(size = 12, face = "bold"),  # 横坐标字体加大加粗
      axis.text.y = element_text(size = 12, face = "bold"),  # 纵坐标字体加大加粗
    )
  ggsave(filename,device = "pdf",width =8 ,height =6 )
}
SVexpr.cn.plot("TERT",100000)
SVexpr.cn.plot("CCNE1",125000)
SVexpr.cn.plot("CDK4",125000)
SVexpr.cn.plot("FRS2",250000)
SVexpr.cn.plot("MDM2",125000)
SVexpr.cn.plot("EGFR",250000)
SVexpr.cn.plot("ELDR",300000)
#除了TERT以外，其它的所有基因的SV样本的基因表达事实上都是和CN强相关的

##绘制第三张图分类箱线图
SV.expr.boxplot <- function(gene,SV_distance){
#得到转录本的长度和正负链的信息
gene_transcript_length <- ensembl_canonical_transcripts_bed4$end[ensembl_canonical_transcripts_bed4$gene_name==gene]-ensembl_canonical_transcripts_bed4$start[ensembl_canonical_transcripts_bed4$gene_name==gene]
gene_strand <- ensembl_canonical_transcripts_bed4$strand[ensembl_canonical_transcripts_bed4$gene_name==gene]


#把断点和区间做overlap
gene_bed <- ensembl_canonical_transcripts_bed4[ensembl_canonical_transcripts_bed4$gene_name==gene,]
gene_plus_flanking_bed <- ensembl_canonical_transcripts_bed4 %>%
  filter(gene_name==gene) %>%
  mutate(start=start-500000,end=end+500000)
gr_gene_plus_flanking <- GRanges(seqnames = gene_plus_flanking_bed$chr,
                                 ranges = IRanges(start = gene_plus_flanking_bed$start+1,
                                                  end=gene_plus_flanking_bed$end))
gr_bedpes <- GRanges(
  seqnames = new_bedpe_986$CHROM_A,
  ranges = IRanges(start = new_bedpe_986$START_A+1,end = new_bedpe_986$END_A)
)
hits_geneplusflanking_bedpes <- findOverlaps(gr_gene_plus_flanking,gr_bedpes)
overlap_data <- data.frame(
  gene_index = queryHits(hits_geneplusflanking_bedpes),
  bedpe_index = subjectHits(hits_geneplusflanking_bedpes)
)
result <- cbind(gene_plus_flanking_bed[overlap_data$gene_index, ],new_bedpe_986[overlap_data$bedpe_index, ])

##判断一下基因的正负链
if(gene_strand=="-"){
  df <- result %>%
    select(gene_name,CHROM_A,START_A,END_A,SAMPLE,INFO,ID) %>%
    mutate(distance_SV2TSS=gene_bed$end-START_A) %>%
    mutate(relative_location=ifelse(distance_SV2TSS<0,"upstream",
                                    ifelse(gene_transcript_length>abs(distance_SV2TSS) & distance_SV2TSS>0,
                                           "gene_body","downstream"))) %>%
    mutate(Sample=SAMPLE,symbol=gene_name) %>%
    left_join(lc_1019_expr_long,by=c("Sample","symbol")) %>%
    select(-Sample,-symbol) %>%
    #每个样本仅保留到TSS距离最小者
    group_by(SAMPLE) %>%
    filter(abs(distance_SV2TSS) == min(abs(distance_SV2TSS))) %>%
    ungroup() %>%
    mutate(Gene=gene_name,Sample=SAMPLE) %>%
    left_join(absolute_cn_long,by=c("Gene","Sample")) %>%
    select(-Sample,-Gene,-Cytoband)
}else{
  df <- result %>%
    select(gene_name,CHROM_A,START_A,END_A,SAMPLE,INFO,ID) %>%
    mutate(distance_SV2TSS=gene_bed$start-START_A) %>%
    mutate(relative_location=ifelse(distance_SV2TSS>0,"upstream",
                                    ifelse(gene_transcript_length>abs(distance_SV2TSS) & distance_SV2TSS<0,
                                           "gene_body","downstream"))) %>%
    mutate(Sample=SAMPLE,symbol=gene_name) %>%
    left_join(lc_1019_expr_long,by=c("Sample","symbol")) %>%
    select(-Sample,-symbol) %>%
    #每个样本仅保留到TSS距离最小者
    group_by(SAMPLE) %>%
    filter(abs(distance_SV2TSS) == min(abs(distance_SV2TSS))) %>%
    ungroup() %>%
    mutate(Gene=gene_name,Sample=SAMPLE) %>%
    left_join(absolute_cn_long,by=c("Gene","Sample")) %>%
    select(-Sample,-Gene,-Cytoband)

}

SV_genebody_samples <- df$SAMPLE[df$relative_location=="gene_body"]
SV_dnstr_samples <- df$SAMPLE[abs(df$distance_SV2TSS) < SV_distance & df$relative_location=="downstream"]
SV_upstr_samples <- df$SAMPLE[abs(df$distance_SV2TSS) < SV_distance & df$relative_location=="upstream"]
df_plot <- lc_1019_expr_long %>%
  filter(symbol==gene) %>%
  mutate(Gene=symbol) %>%
  left_join(absolute_cn_long,by=c("Sample","Gene"))
df_plot <- df_plot %>%
  mutate(group=ifelse(Sample %in% SV_genebody_samples,paste0(gene," sv"),
                      ifelse(Sample %in% SV_upstr_samples,paste0(gene," upstream sv"),
                             ifelse(Sample %in% SV_dnstr_samples,paste0(gene," downstream sv"),
                                    ifelse(Absolute_CN>=4,paste0(gene," amp"),paste0(gene," wt")))))) %>%
  filter(!is.na(group)) %>%
  group_by(group) %>%
  mutate(group_n = n()) %>%
  ungroup()
df_plot$group <- factor(df_plot$group,levels = c(paste0(gene," wt"),paste0(gene," amp"),
                                                 paste0(gene," downstream sv"),
                                                 paste0(gene," sv"),
                                                 paste0(gene," upstream sv")))
color_mapping <- c(
  "#606060",
  "#341831",
  "#4D779B",
  "#FFC04D",
  "#CD3842"
)
names(color_mapping) <- c(
  paste0(gene, " wt"),
  paste0(gene, " amp"),
  paste0(gene, " downstream sv"),
  paste0(gene, " sv"),
  paste0(gene, " upstream sv")
)
folder_path <- "~/1000_noncoding/3.SV_analysis/pictures/Peifer_expr_boxplots/"
filename <- file.path(folder_path,paste0(gene," expr boxplot.pdf"))
p <- ggplot(df_plot,aes(x=group,y=log2(deseq2_normalized_counts),color=group)) +
  geom_boxplot()+
  theme_bw()+
  scale_color_manual(values = color_mapping)+
  scale_x_discrete(
    labels = c(paste0(gene," wt\n(n=",unique(df_plot$group_n[df_plot$group==paste0(gene," wt")]),")"),
               paste0(gene," amp\n(n=",unique(df_plot$group_n[df_plot$group==paste0(gene," amp")]),")"),
               paste0(gene," downstream sv\n(n=",unique(df_plot$group_n[df_plot$group==paste0(gene," downstream sv")]),")"),
               paste0(gene," sv\n(n=",unique(df_plot$group_n[df_plot$group==paste0(gene," sv")]),")"),
               paste0(gene," upstream sv\n(n=",unique(df_plot$group_n[df_plot$group==paste0(gene," upstream sv")]),")")
    )
  ) +
  theme(legend.position="none")+
  ylim(0,ceiling(max(log2(df_plot$deseq2_normalized_counts))+4.5))+
  labs(x="",y=paste0(gene," Expression Score"))+
  theme(
    axis.title.x = element_text(size = 14, face = "bold"),  # 横坐标加粗并增大字体
    axis.title.y = element_text(size = 14, face = "bold"),   # 纵坐标加粗并增大字体
    axis.text.x = element_text(size = 10, face = "bold"),  # 横坐标字体加大加粗
    axis.text.y = element_text(size = 12, face = "bold"),  # 纵坐标字体加大加粗
  )
my_comparisons <- list(c(paste0(gene," wt"),paste0(gene," amp")), c(paste0(gene," wt"),paste0(gene," downstream sv")),
                       c(paste0(gene," wt"),paste0(gene," sv")),c(paste0(gene," wt"),paste0(gene," upstream sv")))
p+stat_compare_means(comparisons = my_comparisons,
                           label.y = c(max(log2(df_plot$deseq2_normalized_counts))-0.5,
                                       max(log2(df_plot$deseq2_normalized_counts))+0.5,
                                       max(log2(df_plot$deseq2_normalized_counts))+1.5,
                                       max(log2(df_plot$deseq2_normalized_counts))+2.5
                           )) #默认就是wilconx秩和检验
ggsave(filename,device = "pdf",width =8 ,height =6 )
}
SV.expr.boxplot("TERT",100000)
SV.expr.boxplot("CCNE1",125000)
SV.expr.boxplot("CDK4",125000)
SV.expr.boxplot("FRS2",250000)
SV.expr.boxplot("MDM2",125000)
SV.expr.boxplot("EGFR",250000)
SV.expr.boxplot("ELDR",300000)

```
                                                    (Result)
The output from FASTQC and multiqc look good!  Proceeding to differential expression analysis of unicorn horn between activated and unactivated samples.
